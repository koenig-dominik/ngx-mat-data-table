!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("rxjs/BehaviorSubject"),require("rxjs/observable/merge"),require("rxjs/operators"),require("rxjs/operators/debounceTime"),require("rxjs/operators/distinctUntilChanged"),require("@angular/core"),require("@angular/material"),require("@angular/cdk/collections"),require("rxjs/add/operator/skip"),require("@angular/common"),require("@angular/forms")):"function"==typeof define&&define.amd?define(["exports","rxjs/BehaviorSubject","rxjs/observable/merge","rxjs/operators","rxjs/operators/debounceTime","rxjs/operators/distinctUntilChanged","@angular/core","@angular/material","@angular/cdk/collections","rxjs/add/operator/skip","@angular/common","@angular/forms"],t):t(e["ngx-mat-data-table"]={},e.Rx,e.Rx.Observable,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.ng.core,e.ng.material,e.ng.cdk.collections,e.Rx.Observable.prototype,e.ng.common,e.ng.forms)}(this,function(e,t,i,n,a,o,r,l,c,m,s,d){"use strict";function u(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,o,r=n.call(e),l=[];try{for(;(void 0===t||0<t--)&&!(a=r.next()).done;)l.push(a.value)}catch(i){o={error:i}}finally{try{a&&!a.done&&(n=r["return"])&&n.call(r)}finally{if(o)throw o.error}}return l}var g=function(){function e(e){this.snackBar=e,this.displayedColumns=["select"],this.selection=new c.SelectionModel(!0,[]),this.filterChanged=new r.EventEmitter,this.cellChanged=new r.EventEmitter}return e.prototype.ngOnInit=function(){var e,t,n=this;try{for(var a=function(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}(this.columns),o=a.next();!o.done;o=a.next()){var r=o.value;this.displayedColumns.push(r.name)}}catch(l){e={error:l}}finally{try{o&&!o.done&&(t=a["return"])&&t.call(a)}finally{if(e)throw e.error}}this.dataSource.setup(this.paginator,this.sort,this.filterChanged,this.cellChanged),i.merge(this.sort.sortChange,this.filterChanged).subscribe(function(){return n.paginator.pageIndex=0}),this.dataSource.saveError.skip(1).subscribe(function(e){n.snackBar.open(e,null,{duration:2e3,horizontalPosition:"right",verticalPosition:"bottom"})})},e.prototype.cellChange=function(e,t,n,a){t[e]=n,this.cellChanged.emit({column:e,values:t,rowIndex:a})},e.prototype.filterChange=function(e){this.filter=e.trim().toLowerCase(),this.filterChanged.emit(this.filter)},e.prototype.masterToggle=function(){var e;this.isAllSelected()?this.selection.clear():(e=this.selection).select.apply(e,function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(u(arguments[t]));return e}(this.dataSource.renderedRows))},e.prototype.isAllSelected=function(){return this.selection.selected.length===this.dataSource.renderedRows.length},e}();g.decorators=[{type:r.Component,args:[{selector:"ngx-mat-data-table",template:'<mat-card>\n  <mat-card-header>\n    <mat-card-title>{{title}}</mat-card-title>\n    <mat-card-subtitle>\n      <mat-form-field>\n        <input [ngModel]="filter" (ngModelChange)="filterChange($event)" matInput placeholder="Filter">\n      </mat-form-field>\n    </mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-content>\n    <mat-progress-bar [class.show]="(dataSource.loading | async) || (dataSource.buffering | async)" [mode]="(dataSource.buffering | async) ? \'buffer\' : \'indeterminate\'"></mat-progress-bar>\n    <mat-table #table [dataSource]="dataSource"\n               matSort [matSortActive]="sortColumn" matSortDisableClear matSortDirection="asc">\n      \x3c!-- Checkbox Column --\x3e\n      <ng-container matColumnDef="select">\n        <mat-header-cell *matHeaderCellDef>\n          <mat-checkbox (change)="$event ? masterToggle() : null"\n                        [checked]="selection.hasValue() && isAllSelected()"\n                        [indeterminate]="selection.hasValue() && !isAllSelected()">\n          </mat-checkbox>\n        </mat-header-cell>\n        <mat-cell *matCellDef="let row">\n          <mat-checkbox (click)="$event.stopPropagation()"\n                        (change)="$event ? selection.toggle(row) : null"\n                        [checked]="selection.isSelected(row)">\n          </mat-checkbox>\n        </mat-cell>\n      </ng-container>\n      <ng-container *ngFor="let column of columns" [matColumnDef]="column.name">\n        <mat-header-cell mat-sort-header *matHeaderCellDef [style.max-width]="(column.width + 24) + \'px\'">{{column.label}}</mat-header-cell>\n        <mat-cell *matCellDef="let row; let rowIndex = index" [style.max-width]="(column.width + 24) + \'px\'">\n          <ng-container *ngIf="!column.editable; else editable">\n            <ng-container *ngIf="row[column.name].constructor.name !== \'Date\'; else date">\n              {{row[column.name]}}\n            </ng-container>\n            <ng-template #date>\n              {{row[column.name] | date:\'short\'}}\n            </ng-template>\n          </ng-container>\n          <ng-template #editable>\n            <mat-progress-bar [class.show]="dataSource.renderedSavingRows[rowIndex].get(column.name) | async" mode="indeterminate"></mat-progress-bar>\n            <ng-container *ngIf="column.values; else elseIf">\n              <mat-form-field [style.max-width]="column.width + \'px\'">\n                <mat-select [ngModel]="row[column.name]" (ngModelChange)="cellChange(column.name, row, $event, rowIndex)">\n                  <mat-option *ngFor="let value of column.values" [value]="value">\n                    {{ value }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n            </ng-container>\n            <ng-template #elseIf>\n              <ng-container *ngIf="row[column.name].constructor.name !== \'Date\'; else datepicker">\n                <div class="edit-button" [matMenuTriggerFor]="menu">\n                  {{row[column.name]}}\n                  <mat-icon>edit_mode</mat-icon>\n                </div>\n                <mat-menu #menu="matMenu">\n                  <div mat-menu-item disabled class="full-height-menu-item">\n                    <mat-form-field class="mat-cell" [style.max-width]="column.width + \'px\'"> \x3c!-- mat-cell is a hack to override the disabled state of mat-menu-item --\x3e\n                      <input matInput #message [attr.maxlength]="column.maxLength" [ngModel]="row[column.name]" (ngModelChange)="cellChange(column.name, row, $event, rowIndex)">\n                      <mat-hint align="end">{{message.value.length}} / {{column.maxLength}}</mat-hint>\n                    </mat-form-field>\n                  </div>\n                </mat-menu>\n              </ng-container>\n              <ng-template #datepicker>\n                <mat-form-field [style.max-width]="column.width + \'px\'">\n                  <input matInput [matDatepicker]="picker" [ngModel]="row[column.name]" (ngModelChange)="cellChange(column.name, row, $event, rowIndex)">\n                  <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>\n                  <mat-datepicker #picker></mat-datepicker>\n                </mat-form-field>\n              </ng-template>\n            </ng-template>\n          </ng-template>\n        </mat-cell>\n      </ng-container>\n      <mat-header-row *matHeaderRowDef="displayedColumns"></mat-header-row>\n      <mat-row *matRowDef="let row; columns: displayedColumns;"></mat-row>\n    </mat-table>\n    <mat-paginator [pageSize]="5"\n                   [pageSizeOptions]="[5, 10, 20]"\n                   [showFirstLastButtons]="true">\n    </mat-paginator>\n  </mat-card-content>\n</mat-card>\n',styles:[":host{display:block}:host ::ng-deep .mat-card{padding:0}:host ::ng-deep .mat-card .mat-card-header{padding-left:24px;padding-right:24px;padding-top:24px}:host ::ng-deep .mat-cell .mat-input-underline{visibility:hidden}:host .mat-progress-bar{opacity:0}:host .mat-progress-bar.show{opacity:1}:host .mat-column-select{max-width:44px;overflow:visible}:host .mat-cell .edit-button{cursor:pointer;line-height:24px;margin-right:24px;padding-top:1.16em;padding-bottom:1.18em}:host .mat-cell .edit-button .mat-icon{float:right}.full-height-menu-item{height:auto;line-height:initial}"]}]}],g.ctorParameters=function(){return[{type:l.MatSnackBar}]},g.propDecorators={title:[{type:r.Input}],columns:[{type:r.Input}],sortColumn:[{type:r.Input}],uniqueColumn:[{type:r.Input}],dataSource:[{type:r.Input}],paginator:[{type:r.ViewChild,args:[l.MatPaginator]}],sort:[{type:r.ViewChild,args:[l.MatSort]}]};var p=function(){function e(){}return e.forRoot=function(){return{ngModule:e,providers:[]}},e}();p.decorators=[{type:r.NgModule,args:[{imports:[s.CommonModule,l.MatTableModule,l.MatFormFieldModule,l.MatInputModule,l.MatCardModule,l.MatCheckboxModule,l.MatNativeDateModule,l.MatDatepickerModule,l.MatSelectModule,l.MatIconModule,l.MatMenuModule,l.MatPaginatorModule,l.MatSortModule,l.MatProgressBarModule,l.MatSnackBarModule,d.FormsModule],declarations:[g],exports:[g],providers:[]}]}],p.ctorParameters=function(){return[]},e.DataTableModule=p,e.Éµa=g,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-mat-data-table.umd.min.js.map
