{
  "version": 3,
  "file": "ngx-mat-data-table.js",
  "sources": [
    "ng://ngx-mat-data-table/out/data-table.module.ts",
    "ng://ngx-mat-data-table/out/components/data-table/data-table.component.ts"
  ],
  "sourcesContent": [
    "import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport {\r\n  MatCardModule, MatCheckboxModule, MatFormFieldModule, MatInputModule, MatTableModule, MatDatepickerModule,\r\n  MatNativeDateModule, MatSelectModule, MatIconModule, MatMenuModule, MatPaginatorModule, MatSortModule, MatProgressBarModule,\r\n  MatSnackBarModule\r\n} from '@angular/material';\r\n\r\nimport { DataTableComponent } from './components/data-table/data-table.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatNativeDateModule,\r\n    MatDatepickerModule,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatProgressBarModule,\r\n    MatSnackBarModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [\r\n    DataTableComponent\r\n  ],\r\n  exports: [\r\n    DataTableComponent\r\n  ],\r\n  providers: [\r\n\r\n  ]\r\n})\r\nexport class DataTableModule {\r\n  public static forRoot(): ModuleWithProviders {\r\n\r\n    return {\r\n      ngModule: DataTableModule,\r\n      providers: [\r\n      ]\r\n    };\r\n  }\r\n}\r\n",
    "import {Component, EventEmitter, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {MatPaginator, MatSnackBar, MatSort} from '@angular/material';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport 'rxjs/add/operator/skip';\r\n\r\nimport {AsyncDataSource} from './async-data-source';\r\n\r\n@Component({\r\n  selector: 'ngx-mat-data-table',\r\n  template: `<mat-card>\r\n  <mat-card-header>\r\n    <mat-card-title>{{title}}</mat-card-title>\r\n    <mat-card-subtitle>\r\n      <mat-form-field>\r\n        <input [ngModel]=\"filter\" (ngModelChange)=\"filterChange($event)\" matInput placeholder=\"Filter\">\r\n      </mat-form-field>\r\n    </mat-card-subtitle>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n    <mat-progress-bar [class.show]=\"(dataSource.loading | async) || (dataSource.buffering | async)\" [mode]=\"(dataSource.buffering | async) ? 'buffer' : 'indeterminate'\"></mat-progress-bar>\r\n    <mat-table #table [dataSource]=\"dataSource\"\r\n               matSort [matSortActive]=\"sortColumn\" matSortDisableClear matSortDirection=\"asc\">\r\n\r\n      <!-- Checkbox Column -->\r\n      <ng-container matColumnDef=\"select\">\r\n        <mat-header-cell *matHeaderCellDef>\r\n          <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                        [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                        [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\r\n          </mat-checkbox>\r\n        </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row\">\r\n          <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                        (change)=\"$event ? selection.toggle(row) : null\"\r\n                        [checked]=\"selection.isSelected(row)\">\r\n          </mat-checkbox>\r\n        </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container *ngFor=\"let column of columns\" [matColumnDef]=\"column.name\">\r\n        <mat-header-cell mat-sort-header *matHeaderCellDef [style.max-width]=\"(column.width + 24) + 'px'\">{{column.label}}</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row; let rowIndex = index\" [style.max-width]=\"(column.width + 24) + 'px'\">\r\n          <ng-container *ngIf=\"!column.editable; else editable\">\r\n\r\n            <ng-container *ngIf=\"row[column.name].constructor.name !== 'Date'; else date\">\r\n              {{row[column.name]}}\r\n            </ng-container>\r\n\r\n            <ng-template #date>\r\n              {{row[column.name] | date:'short'}}\r\n            </ng-template>\r\n\r\n          </ng-container>\r\n          <ng-template #editable>\r\n\r\n            <mat-progress-bar [class.show]=\"dataSource.renderedSavingRows[rowIndex].get(column.name) | async\" mode=\"indeterminate\"></mat-progress-bar>\r\n\r\n            <ng-container *ngIf=\"column.values; else elseIf\">\r\n              <mat-form-field [style.max-width]=\"column.width + 'px'\">\r\n                <mat-select [ngModel]=\"row[column.name]\" (ngModelChange)=\"cellChange(column.name, row, $event, rowIndex)\">\r\n                  <mat-option *ngFor=\"let value of column.values\" [value]=\"value\">\r\n                    {{ value }}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </ng-container>\r\n\r\n            <ng-template #elseIf>\r\n              <ng-container *ngIf=\"row[column.name].constructor.name !== 'Date'; else datepicker\">\r\n                <div class=\"edit-button\" [matMenuTriggerFor]=\"menu\">\r\n                  {{row[column.name]}}\r\n                  <mat-icon>edit_mode</mat-icon>\r\n                </div>\r\n                <mat-menu #menu=\"matMenu\">\r\n                  <div mat-menu-item disabled class=\"full-height-menu-item\">\r\n                    <mat-form-field class=\"mat-cell\" [style.max-width]=\"column.width + 'px'\"> <!-- mat-cell is a hack to override the disabled state of mat-menu-item -->\r\n                      <input matInput #message [attr.maxlength]=\"column.maxLength\" [ngModel]=\"row[column.name]\" (ngModelChange)=\"cellChange(column.name, row, $event, rowIndex)\">\r\n                      <mat-hint align=\"end\">{{message.value.length}} / {{column.maxLength}}</mat-hint>\r\n                    </mat-form-field>\r\n                  </div>\r\n                </mat-menu>\r\n              </ng-container>\r\n\r\n              <ng-template #datepicker>\r\n                <mat-form-field [style.max-width]=\"column.width + 'px'\">\r\n                  <input matInput [matDatepicker]=\"picker\" [ngModel]=\"row[column.name]\" (ngModelChange)=\"cellChange(column.name, row, $event, rowIndex)\">\r\n                  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                  <mat-datepicker #picker></mat-datepicker>\r\n                </mat-form-field>\r\n              </ng-template>\r\n            </ng-template>\r\n\r\n          </ng-template>\r\n        </mat-cell>\r\n      </ng-container>\r\n\r\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n    </mat-table>\r\n    <mat-paginator [pageSize]=\"5\"\r\n                   [pageSizeOptions]=\"[5, 10, 20]\"\r\n                   [showFirstLastButtons]=\"true\">\r\n    </mat-paginator>\r\n  </mat-card-content>\r\n</mat-card>\r\n`,\r\n  styles: [`:host{display:block}:host ::ng-deep .mat-card{padding:0}:host ::ng-deep .mat-card .mat-card-header{padding-left:24px;padding-right:24px;padding-top:24px}:host ::ng-deep .mat-cell .mat-input-underline{visibility:hidden}:host .mat-progress-bar{opacity:0}:host .mat-progress-bar.show{opacity:1}:host .mat-column-select{max-width:44px;overflow:visible}:host .mat-cell .edit-button{cursor:pointer;line-height:24px;margin-right:24px;padding-top:1.16em;padding-bottom:1.18em}:host .mat-cell .edit-button .mat-icon{float:right}.full-height-menu-item{height:auto;line-height:initial}`]\r\n})\r\nexport class DataTableComponent<T> implements OnInit {\r\n\r\n  @Input() title: string;\r\n  @Input() columns: Column[];\r\n  @Input() sortColumn: string;\r\n  @Input() uniqueColumn: string;\r\n\r\n  @Input() dataSource: AsyncDataSource<T>;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  displayedColumns = ['select'];\r\n  selection = new SelectionModel<T>(true, []);\r\n\r\n  filter: string;\r\n  private filterChanged = new EventEmitter<string>();\r\n\r\n  private cellChanged = new EventEmitter<{column: string, values: T, rowIndex: number}>();\r\n\r\n  constructor(private snackBar: MatSnackBar) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    for (const column of this.columns) {\r\n      this.displayedColumns.push(column.name);\r\n    }\r\n\r\n    this.dataSource.setup(this.paginator, this.sort, this.filterChanged, this.cellChanged);\r\n\r\n    // If the user changes the sort or the filter, reset back to the first page.\r\n    merge(this.sort.sortChange, this.filterChanged).subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n    this.dataSource.saveError.skip(1).subscribe((error) => {\r\n      this.snackBar.open(error, null, {\r\n        duration: 2000,\r\n        horizontalPosition: 'right',\r\n        verticalPosition: 'bottom'\r\n      });\r\n    });\r\n  }\r\n\r\n  cellChange(column: string, row: T, newValue: any, rowIndex: number) {\r\n    row[column] = newValue;\r\n\r\n    this.cellChanged.emit({column: column, values: row, rowIndex: rowIndex});\r\n  }\r\n\r\n  filterChange(newValue: string) {\r\n    this.filter = newValue.trim().toLowerCase(); // Remove whitespace; MatTableDataSource defaults to lowercase matches\r\n    this.filterChanged.emit(this.filter);\r\n  }\r\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n  masterToggle() {\r\n    if (this.isAllSelected()) {\r\n      this.selection.clear();\r\n    } else {\r\n      this.selection.select(...this.dataSource.renderedRows);\r\n    }\r\n  }\r\n\r\n  /** Whether the number of selected elements matches the total number of rows displayed. */\r\n  private isAllSelected() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource.renderedRows.length;\r\n    return numSelected === numRows;\r\n  }\r\n}\r\n\r\nexport interface Column {\r\n  name: string;\r\n  label: string;\r\n  width?: string;\r\n  editable?: boolean;\r\n  maxLength?: number;\r\n  values?: (string | number)[];\r\n}\r\n"
  ],
  "names": [],
  "mappings": "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"
}
