{
  "version": 3,
  "file": "ngx-mat-data-table.js",
  "sources": [
    "ng://ngx-mat-data-table/out/data-table.module.ts",
    "ng://ngx-mat-data-table/out/components/data-table/data-table.component.ts",
    "ng://ngx-mat-data-table/out/async-data-source.ts"
  ],
  "sourcesContent": [
    "import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport {\r\n  MatCardModule, MatCheckboxModule, MatFormFieldModule, MatInputModule, MatTableModule, MatDatepickerModule,\r\n  MatNativeDateModule, MatSelectModule, MatIconModule, MatMenuModule, MatPaginatorModule, MatSortModule, MatProgressBarModule,\r\n  MatSnackBarModule\r\n} from '@angular/material';\r\n\r\nimport { DataTableComponent } from './components/data-table/data-table.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatNativeDateModule,\r\n    MatDatepickerModule,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatProgressBarModule,\r\n    MatSnackBarModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [\r\n    DataTableComponent\r\n  ],\r\n  exports: [\r\n    DataTableComponent\r\n  ],\r\n  providers: [\r\n\r\n  ]\r\n})\r\nexport class DataTableModule {\r\n  public static forRoot(): ModuleWithProviders {\r\n\r\n    return {\r\n      ngModule: DataTableModule,\r\n      providers: [\r\n      ]\r\n    };\r\n  }\r\n}\r\n",
    "import {Component, EventEmitter, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {MatPaginator, MatSnackBar, MatSort} from '@angular/material';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport 'rxjs/add/operator/skip';\r\n\r\nimport {AsyncDataSource} from '../../async-data-source';\r\n\r\n@Component({\r\n  selector: 'ngx-mat-data-table',\r\n  template: `<mat-card>\r\n  <mat-card-header>\r\n    <mat-card-title>{{title}}</mat-card-title>\r\n    <mat-card-subtitle>\r\n      <mat-form-field>\r\n        <input [ngModel]=\"filter\" (ngModelChange)=\"filterChange($event)\" matInput placeholder=\"Filter\">\r\n      </mat-form-field>\r\n    </mat-card-subtitle>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n    <mat-progress-bar [class.show]=\"(dataSource.loading | async) || (dataSource.buffering | async)\" [mode]=\"(dataSource.buffering | async) ? 'buffer' : 'indeterminate'\"></mat-progress-bar>\r\n    <mat-table #table [dataSource]=\"dataSource\"\r\n               matSort [matSortActive]=\"sortColumn\" matSortDisableClear matSortDirection=\"asc\">\r\n\r\n      <!-- Checkbox Column -->\r\n      <ng-container matColumnDef=\"select\">\r\n        <mat-header-cell *matHeaderCellDef>\r\n          <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                        [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                        [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\r\n          </mat-checkbox>\r\n        </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row\">\r\n          <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                        (change)=\"$event ? selection.toggle(row) : null\"\r\n                        [checked]=\"selection.isSelected(row)\">\r\n          </mat-checkbox>\r\n        </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container *ngFor=\"let column of columns\" [matColumnDef]=\"column.name\">\r\n        <mat-header-cell mat-sort-header *matHeaderCellDef [style.max-width]=\"(column.width + 24) + 'px'\">{{column.label}}</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row; let rowIndex = index\" [style.max-width]=\"(column.width + 24) + 'px'\">\r\n          <ng-container *ngIf=\"!column.editable; else editable\">\r\n\r\n            <ng-container *ngIf=\"row[column.name].constructor.name !== 'Date'; else date\">\r\n              {{row[column.name]}}\r\n            </ng-container>\r\n\r\n            <ng-template #date>\r\n              {{row[column.name] | date:'short'}}\r\n            </ng-template>\r\n\r\n          </ng-container>\r\n          <ng-template #editable>\r\n\r\n            <mat-progress-bar [class.show]=\"dataSource.renderedSavingRows[rowIndex].get(column.name) | async\" mode=\"indeterminate\"></mat-progress-bar>\r\n\r\n            <ng-container *ngIf=\"column.values; else elseIf\">\r\n              <mat-form-field [style.max-width]=\"column.width + 'px'\">\r\n                <mat-select [ngModel]=\"row[column.name]\" (ngModelChange)=\"cellChange(column.name, row, $event, rowIndex)\">\r\n                  <mat-option *ngFor=\"let value of column.values\" [value]=\"value\">\r\n                    {{ value }}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </ng-container>\r\n\r\n            <ng-template #elseIf>\r\n              <ng-container *ngIf=\"row[column.name].constructor.name !== 'Date'; else datepicker\">\r\n                <div class=\"edit-button\" [matMenuTriggerFor]=\"menu\">\r\n                  {{row[column.name]}}\r\n                  <mat-icon>edit_mode</mat-icon>\r\n                </div>\r\n                <mat-menu #menu=\"matMenu\">\r\n                  <div mat-menu-item disabled class=\"full-height-menu-item\">\r\n                    <mat-form-field class=\"mat-cell\" [style.max-width]=\"column.width + 'px'\"> <!-- mat-cell is a hack to override the disabled state of mat-menu-item -->\r\n                      <input matInput #message [attr.maxlength]=\"column.maxLength\" [ngModel]=\"row[column.name]\" (ngModelChange)=\"cellChange(column.name, row, $event, rowIndex)\">\r\n                      <mat-hint align=\"end\">{{message.value.length}} / {{column.maxLength}}</mat-hint>\r\n                    </mat-form-field>\r\n                  </div>\r\n                </mat-menu>\r\n              </ng-container>\r\n\r\n              <ng-template #datepicker>\r\n                <mat-form-field [style.max-width]=\"column.width + 'px'\">\r\n                  <input matInput [matDatepicker]=\"picker\" [ngModel]=\"row[column.name]\" (ngModelChange)=\"cellChange(column.name, row, $event, rowIndex)\">\r\n                  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                  <mat-datepicker #picker></mat-datepicker>\r\n                </mat-form-field>\r\n              </ng-template>\r\n            </ng-template>\r\n\r\n          </ng-template>\r\n        </mat-cell>\r\n      </ng-container>\r\n\r\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n    </mat-table>\r\n    <mat-paginator [pageSize]=\"5\"\r\n                   [pageSizeOptions]=\"[5, 10, 20]\"\r\n                   [showFirstLastButtons]=\"true\">\r\n    </mat-paginator>\r\n  </mat-card-content>\r\n</mat-card>\r\n`,\r\n  styles: [`:host{display:block}:host ::ng-deep .mat-card{padding:0}:host ::ng-deep .mat-card .mat-card-header{padding-left:24px;padding-right:24px;padding-top:24px}:host ::ng-deep .mat-cell .mat-input-underline{visibility:hidden}:host .mat-progress-bar{opacity:0}:host .mat-progress-bar.show{opacity:1}:host .mat-column-select{max-width:44px;overflow:visible}:host .mat-cell .edit-button{cursor:pointer;line-height:24px;margin-right:24px;padding-top:1.16em;padding-bottom:1.18em}:host .mat-cell .edit-button .mat-icon{float:right}.full-height-menu-item{height:auto;line-height:initial}`]\r\n})\r\nexport class DataTableComponent<T> implements OnInit {\r\n\r\n  @Input() title: string;\r\n  @Input() columns: Column[];\r\n  @Input() sortColumn: string;\r\n  @Input() uniqueColumn: string;\r\n\r\n  @Input() dataSource: AsyncDataSource<T>;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  displayedColumns = ['select'];\r\n  selection = new SelectionModel<T>(true, []);\r\n\r\n  filter: string;\r\n  private filterChanged = new EventEmitter<string>();\r\n\r\n  private cellChanged = new EventEmitter<{column: string, values: T, rowIndex: number}>();\r\n\r\n  constructor(private snackBar: MatSnackBar) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    for (const column of this.columns) {\r\n      this.displayedColumns.push(column.name);\r\n    }\r\n\r\n    this.dataSource.setup(this.paginator, this.sort, this.filterChanged, this.cellChanged);\r\n\r\n    // If the user changes the sort or the filter, reset back to the first page.\r\n    merge(this.sort.sortChange, this.filterChanged).subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n    this.dataSource.saveError.skip(1).subscribe((error) => {\r\n      this.snackBar.open(error, null, {\r\n        duration: 2000,\r\n        horizontalPosition: 'right',\r\n        verticalPosition: 'bottom'\r\n      });\r\n    });\r\n  }\r\n\r\n  cellChange(column: string, row: T, newValue: any, rowIndex: number) {\r\n    row[column] = newValue;\r\n\r\n    this.cellChanged.emit({column: column, values: row, rowIndex: rowIndex});\r\n  }\r\n\r\n  filterChange(newValue: string) {\r\n    this.filter = newValue.trim().toLowerCase(); // Remove whitespace; MatTableDataSource defaults to lowercase matches\r\n    this.filterChanged.emit(this.filter);\r\n  }\r\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n  masterToggle() {\r\n    if (this.isAllSelected()) {\r\n      this.selection.clear();\r\n    } else {\r\n      this.selection.select(...this.dataSource.renderedRows);\r\n    }\r\n  }\r\n\r\n  /** Whether the number of selected elements matches the total number of rows displayed. */\r\n  private isAllSelected() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource.renderedRows.length;\r\n    return numSelected === numRows;\r\n  }\r\n}\r\n\r\nexport interface Column {\r\n  name: string;\r\n  label: string;\r\n  width?: string;\r\n  editable?: boolean;\r\n  maxLength?: number;\r\n  values?: (string | number)[];\r\n}\r\n",
    "import {CollectionViewer, DataSource} from '@angular/cdk/collections';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {tap} from 'rxjs/operators';\r\nimport {debounceTime} from 'rxjs/operators/debounceTime';\r\nimport {distinctUntilChanged} from 'rxjs/operators/distinctUntilChanged';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\nexport type FetchFunction<T> = (\r\n  filter: string,\r\n  sortColumn: string,\r\n  sortDirection: string,\r\n  offset: number,\r\n  fetchSize: number\r\n) => Promise<{\r\n  count: number,\r\n  items: T[]\r\n}>;\r\n\r\nexport type ChangeFunction<T> = (\r\n  column: string,\r\n  values: T\r\n) => Promise<void>;\r\n\r\nexport class AsyncDataSource<T> implements DataSource<T> {\r\n\r\n  private paginator: MatPaginator;\r\n  private sort: MatSort;\r\n  private filter = '';\r\n\r\n  private renderedRowsSubject = new BehaviorSubject<T[]>([]);\r\n  private loadingSubject = new BehaviorSubject(false);\r\n  private bufferingSubject = new BehaviorSubject(false);\r\n  private saveErrorSubject = new BehaviorSubject('');\r\n\r\n  private rows = new Map<string, T>();\r\n  private rowsViews = new Map<string, T[]>();\r\n  private currentView: T[];\r\n  private currentOffset: number;\r\n\r\n  private savingRows = new Map<string, Map<string, BehaviorSubject<boolean>>>();\r\n  private savingRowsViews = new Map<string, Map<string, BehaviorSubject<boolean>>[]>();\r\n  private currentSavingRowsView: Map<string, BehaviorSubject<boolean>>[];\r\n\r\n  public renderedSavingRows: Map<string, BehaviorSubject<boolean>>[];\r\n\r\n  public readonly loading = this.loadingSubject.asObservable();\r\n  public readonly buffering = this.bufferingSubject.asObservable();\r\n  public readonly saveError = this.saveErrorSubject.asObservable();\r\n  public get renderedRows() {\r\n    return this.renderedRowsSubject.value;\r\n  }\r\n\r\n  constructor(private uniqueKey, private fetchData: FetchFunction<T>, private changeData: ChangeFunction<T>, private debounce = 300) {}\r\n\r\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\r\n    return this.renderedRowsSubject.asObservable();\r\n  }\r\n\r\n  disconnect(collectionViewer: CollectionViewer): void {\r\n    this.renderedRowsSubject.complete();\r\n    this.loadingSubject.complete();\r\n    this.bufferingSubject.complete();\r\n    this.saveErrorSubject.complete();\r\n\r\n    /*for (const savingRow of this.savingCells) {\r\n      for (const savingSubject of Array.from(savingRow.values())) {\r\n        savingSubject.complete();\r\n      }\r\n    }*/\r\n  }\r\n\r\n  public setup(\r\n    paginator: MatPaginator,\r\n    sort: MatSort,\r\n    filterEvent: EventEmitter<string>,\r\n    editedEvent: EventEmitter<{column: string, values: T, rowIndex: number}>\r\n  ): void {\r\n    this.paginator = paginator;\r\n    this.sort = sort;\r\n\r\n    merge(\r\n      filterEvent,\r\n      this.sort.sortChange,\r\n      this.paginator.page\r\n    ).pipe(\r\n      tap((value) => {\r\n        if (typeof value === 'string') { // If the value is of type string it must be the filter\r\n          this.filter = value;\r\n        }\r\n\r\n        this.bufferingSubject.next(true);\r\n      }),\r\n      debounceTime(this.debounce),\r\n      tap(() => {\r\n        this.bufferingSubject.next(false);\r\n      }),\r\n      distinctUntilChanged((oldValue: any, newValue: any) => { // Ignore all events until the value was actually changed\r\n        if (oldValue.pageIndex !== undefined) { // Handle paginator events\r\n          return oldValue.pageIndex === newValue.pageIndex && oldValue.pageSize === newValue.pageSize;\r\n\r\n        } else if (oldValue.direction !== undefined) { // Handle sort events\r\n          return oldValue.active === newValue.active && oldValue.direction === newValue.direction;\r\n\r\n        } else { // Handle filter events\r\n          return oldValue === newValue;\r\n        }\r\n      })\r\n    ).subscribe(() => {\r\n      // noinspection JSIgnoredPromiseFromCall\r\n      this.updateCurrentView();\r\n    });\r\n    Promise.resolve().then(() => { // This skips one tick. This is needed for the paginator and sorter to work correctly\r\n      // noinspection JSIgnoredPromiseFromCall\r\n      this.updateCurrentView();\r\n    });\r\n\r\n    editedEvent.pipe(\r\n      debounceTime(this.debounce)\r\n    ).subscribe(async (event) => {\r\n      const renderedSavingRow = this.renderedSavingRows[event.rowIndex];\r\n      renderedSavingRow.get(event.column).next(true);\r\n\r\n      try {\r\n        await this.changeData(event.column, event.values);\r\n      } catch (error) {\r\n        this.saveErrorSubject.next(error);\r\n      } finally {\r\n        renderedSavingRow.get(event.column).next(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  private async updateCurrentView() {\r\n    this.currentOffset = this.paginator.pageIndex * this.paginator.pageSize;\r\n\r\n    this.loadingSubject.next(true);\r\n    const result = await this.fetchData(\r\n      this.filter,\r\n      this.sort.active,\r\n      this.sort.direction,\r\n      this.currentOffset,\r\n      this.paginator.pageSize\r\n    );\r\n\r\n    this.paginator.length = result.count;\r\n\r\n    const viewKey = `${this.filter};${this.sort.active};${this.sort.direction}`;\r\n    if (this.rowsViews.has(viewKey) === false) {\r\n      this.rowsViews.set(viewKey, []);\r\n      this.savingRowsViews.set(viewKey, []);\r\n    }\r\n    this.currentView = this.rowsViews.get(viewKey);\r\n    this.currentSavingRowsView = this.savingRowsViews.get(viewKey);\r\n\r\n    for (let i = 0, length = result.items.length; i < length; i++) {\r\n      const row = result.items[i];\r\n      const uniqueValue = row[this.uniqueKey];\r\n\r\n      // This is here, so that the rowsViews don't lose their references to the original row\r\n      if (!this.rows.has(uniqueValue)) {\r\n        this.rows.set(uniqueValue, row);\r\n      } else {\r\n        for (const column in row) {\r\n          if (!row.hasOwnProperty(column)) {\r\n            continue;\r\n          }\r\n\r\n          this.rows.get(uniqueValue)[column] = row[column];\r\n        }\r\n      }\r\n\r\n      if (!this.savingRows.has(uniqueValue)) {\r\n        const columns = new Map<string, BehaviorSubject<boolean>>();\r\n        for (const column in row) {\r\n          if (!row.hasOwnProperty(column)) {\r\n            continue;\r\n          }\r\n\r\n          columns.set(column, new BehaviorSubject(false));\r\n        }\r\n        this.savingRows.set(uniqueValue, columns);\r\n      }\r\n\r\n      this.currentView[this.currentOffset + i] = this.rows.get(uniqueValue);\r\n      this.currentSavingRowsView[this.currentOffset + i] = this.savingRows.get(uniqueValue);\r\n    }\r\n\r\n    this.updateRenderedRows();\r\n\r\n    this.loadingSubject.next(false);\r\n  }\r\n\r\n  private updateRenderedRows() {\r\n    this.renderedSavingRows = this.currentSavingRowsView.slice(\r\n      this.currentOffset,\r\n      this.currentOffset + this.paginator.pageSize\r\n    );\r\n\r\n    this.renderedRowsSubject.next(\r\n      this.currentView.slice(\r\n        this.currentOffset,\r\n        this.currentOffset + this.paginator.pageSize\r\n      )\r\n    );\r\n  }\r\n\r\n}\r\n"
  ],
  "names": [
    "tslib_1.__values",
    "tslib_1.__awaiter"
  ],
  "mappings": "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"
}
