{"version":3,"file":"ngx-mat-data-table.js.map","sources":["ng://ngx-mat-data-table/async-data-source.ts","ng://ngx-mat-data-table/components/data-table/data-table.component.ts","ng://ngx-mat-data-table/data-table.module.ts"],"sourcesContent":["import {CollectionViewer, DataSource} from '@angular/cdk/collections';\r\nimport {Observable, BehaviorSubject, merge} from 'rxjs';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {tap, debounceTime, distinctUntilChanged} from 'rxjs/operators';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\nexport type FetchFunction<T> = (\r\n  filter: string,\r\n  sortColumn: string,\r\n  sortDirection: string,\r\n  offset: number,\r\n  fetchSize: number\r\n) => Promise<{\r\n  count: number,\r\n  items: T[]\r\n}>;\r\n\r\nexport type ChangeFunction<T> = (\r\n  column: string,\r\n  values: T\r\n) => Promise<void>;\r\n\r\nexport class AsyncDataSource<T> implements DataSource<T> {\r\n\r\n  private paginator: MatPaginator;\r\n  private sort: MatSort;\r\n  private filter = '';\r\n\r\n  private renderedRowsSubject = new BehaviorSubject<T[]>([]);\r\n  private loadingSubject = new BehaviorSubject(false);\r\n  private bufferingSubject = new BehaviorSubject(false);\r\n  private saveErrorSubject = new BehaviorSubject('');\r\n\r\n  private rows = new Map<string, T>();\r\n  private rowsViews = new Map<string, T[]>();\r\n  private currentView: T[];\r\n  private currentOffset: number;\r\n\r\n  private savingRows = new Map<string, Map<string, BehaviorSubject<boolean>>>();\r\n  private savingRowsViews = new Map<string, Map<string, BehaviorSubject<boolean>>[]>();\r\n  private currentSavingRowsView: Map<string, BehaviorSubject<boolean>>[];\r\n\r\n  public renderedSavingRows: Map<string, BehaviorSubject<boolean>>[];\r\n\r\n  public readonly loading = this.loadingSubject.asObservable();\r\n  public readonly buffering = this.bufferingSubject.asObservable();\r\n  public readonly saveError = this.saveErrorSubject.asObservable();\r\n  public get renderedRows() {\r\n    return this.renderedRowsSubject.value;\r\n  }\r\n  public readonly renderedRowsObservable = this.renderedRowsSubject.asObservable();\r\n\r\n  constructor(private uniqueKey, private fetchData: FetchFunction<T>, private changeData: ChangeFunction<T>, private debounce = 300) {}\r\n\r\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\r\n    return this.renderedRowsSubject.asObservable();\r\n  }\r\n\r\n  disconnect(collectionViewer: CollectionViewer): void {\r\n    this.renderedRowsSubject.complete();\r\n    this.loadingSubject.complete();\r\n    this.bufferingSubject.complete();\r\n    this.saveErrorSubject.complete();\r\n\r\n    /*for (const savingRow of this.savingCells) {\r\n      for (const savingSubject of Array.from(savingRow.values())) {\r\n        savingSubject.complete();\r\n      }\r\n    }*/\r\n  }\r\n\r\n  public setup(\r\n    paginator: MatPaginator,\r\n    sort: MatSort,\r\n    filterEvent: EventEmitter<string>,\r\n    editedEvent: EventEmitter<{column: string, values: T, rowIndex: number}>\r\n  ): void {\r\n    this.paginator = paginator;\r\n    this.sort = sort;\r\n\r\n    merge(\r\n      filterEvent,\r\n      this.sort.sortChange,\r\n      this.paginator.page\r\n    ).pipe(\r\n      tap((value) => {\r\n        if (typeof value === 'string') { // If the value is of type string it must be the filter\r\n          this.filter = value;\r\n        }\r\n\r\n        this.bufferingSubject.next(true);\r\n      }),\r\n      debounceTime(this.debounce),\r\n      tap(() => {\r\n        this.bufferingSubject.next(false);\r\n      }),\r\n      distinctUntilChanged((oldValue: any, newValue: any) => { // Ignore all events until the value was actually changed\r\n        if (oldValue.pageIndex !== undefined) { // Handle paginator events\r\n          return oldValue.pageIndex === newValue.pageIndex && oldValue.pageSize === newValue.pageSize;\r\n\r\n        } else if (oldValue.direction !== undefined) { // Handle sort events\r\n          return oldValue.active === newValue.active && oldValue.direction === newValue.direction;\r\n\r\n        } else { // Handle filter events\r\n          return oldValue === newValue;\r\n        }\r\n      })\r\n    ).subscribe(() => {\r\n      // noinspection JSIgnoredPromiseFromCall\r\n      this.updateCurrentView();\r\n    });\r\n    Promise.resolve().then(() => { // This skips one tick. This is needed for the paginator and sorter to work correctly\r\n      // noinspection JSIgnoredPromiseFromCall\r\n      this.updateCurrentView();\r\n    });\r\n\r\n    editedEvent.pipe(\r\n      debounceTime(this.debounce)\r\n    ).subscribe(async (event) => {\r\n      const renderedSavingRow = this.renderedSavingRows[event.rowIndex];\r\n      renderedSavingRow.get(event.column).next(true);\r\n\r\n      try {\r\n        await this.changeData(event.column, event.values);\r\n      } catch (error) {\r\n        this.saveErrorSubject.next(error);\r\n      } finally {\r\n        renderedSavingRow.get(event.column).next(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  private async updateCurrentView() {\r\n    this.currentOffset = this.paginator.pageIndex * this.paginator.pageSize;\r\n\r\n    this.loadingSubject.next(true);\r\n    const result = await this.fetchData(\r\n      this.filter,\r\n      this.sort.active,\r\n      this.sort.direction,\r\n      this.currentOffset,\r\n      this.paginator.pageSize\r\n    );\r\n\r\n    this.paginator.length = result.count;\r\n\r\n    const viewKey = `${this.filter};${this.sort.active};${this.sort.direction}`;\r\n    if (this.rowsViews.has(viewKey) === false) {\r\n      this.rowsViews.set(viewKey, []);\r\n      this.savingRowsViews.set(viewKey, []);\r\n    }\r\n    this.currentView = this.rowsViews.get(viewKey);\r\n    this.currentSavingRowsView = this.savingRowsViews.get(viewKey);\r\n\r\n    for (let i = 0, length = result.items.length; i < length; i++) {\r\n      const row = result.items[i];\r\n      const uniqueValue = row[this.uniqueKey];\r\n\r\n      // This is here, so that the rowsViews don't lose their references to the original row\r\n      if (!this.rows.has(uniqueValue)) {\r\n        this.rows.set(uniqueValue, row);\r\n      } else {\r\n        for (const column in row) {\r\n          if (!row.hasOwnProperty(column)) {\r\n            continue;\r\n          }\r\n\r\n          this.rows.get(uniqueValue)[column] = row[column];\r\n        }\r\n      }\r\n\r\n      if (!this.savingRows.has(uniqueValue)) {\r\n        const columns = new Map<string, BehaviorSubject<boolean>>();\r\n        for (const column in row) {\r\n          if (!row.hasOwnProperty(column)) {\r\n            continue;\r\n          }\r\n\r\n          columns.set(column, new BehaviorSubject(false));\r\n        }\r\n        this.savingRows.set(uniqueValue, columns);\r\n      }\r\n\r\n      this.currentView[this.currentOffset + i] = this.rows.get(uniqueValue);\r\n      this.currentSavingRowsView[this.currentOffset + i] = this.savingRows.get(uniqueValue);\r\n    }\r\n\r\n    this.updateRenderedRows();\r\n\r\n    this.loadingSubject.next(false);\r\n  }\r\n\r\n  private updateRenderedRows() {\r\n    this.renderedSavingRows = this.currentSavingRowsView.slice(\r\n      this.currentOffset,\r\n      this.currentOffset + this.paginator.pageSize\r\n    );\r\n\r\n    this.renderedRowsSubject.next(\r\n      this.currentView.slice(\r\n        this.currentOffset,\r\n        this.currentOffset + this.paginator.pageSize\r\n      )\r\n    );\r\n  }\r\n\r\n}\r\n","import {Component, EventEmitter, Input, OnDestroy, OnInit, ViewChild} from '@angular/core';\r\nimport {MatPaginator, MatSnackBar, MatSort} from '@angular/material';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {merge} from 'rxjs';\r\nimport {skip} from 'rxjs/operators';\r\n\r\nimport {AsyncDataSource} from '../../async-data-source';\r\nimport {Subscription} from 'rxjs/internal/Subscription';\r\n\r\n@Component({\r\n  selector: 'ngx-mat-data-table',\r\n  template: `<div class=\"mat-typography mat-elevation-z2\">\r\n  <div class=\"header\">\r\n    <h2>{{title}}</h2>\r\n    <div class=\"actions\">\r\n\r\n      <button *ngFor=\"let button of buttons\"\r\n              mat-icon-button\r\n              (click)=\"button.action(selection.selected)\"\r\n              [disabled]=\"button.selectionRequired && selection.selected.length === 0 || button.selectionRequired && !button.multiSelection && selection.selected.length > 1\">\r\n        <mat-icon>{{button.icon}}</mat-icon>\r\n      </button>\r\n      <mat-form-field class=\"search-field\">\r\n        <input [ngModel]=\"filter\" (ngModelChange)=\"filterChange($event)\" matInput placeholder=\"Filter\">\r\n      </mat-form-field>\r\n    </div>\r\n  </div>\r\n\r\n  <mat-progress-bar [class.show]=\"(dataSource.loading | async) || (dataSource.buffering | async)\" [mode]=\"(dataSource.buffering | async) ? 'buffer' : 'indeterminate'\"></mat-progress-bar>\r\n  <mat-table #table [dataSource]=\"dataSource\"\r\n             matSort [matSortActive]=\"sortColumn\" matSortDisableClear matSortDirection=\"asc\">\r\n\r\n    <!-- Checkbox Column -->\r\n    <ng-container matColumnDef=\"select\">\r\n      <mat-header-cell *matHeaderCellDef>\r\n        <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\r\n                      [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                      [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\r\n        </mat-checkbox>\r\n      </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let row\">\r\n        <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\r\n                      (change)=\"$event ? selection.toggle(row) : null\"\r\n                      [checked]=\"selection.isSelected(row)\">\r\n        </mat-checkbox>\r\n      </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container *ngFor=\"let column of columns\" [matColumnDef]=\"column.name\">\r\n      <mat-header-cell mat-sort-header *matHeaderCellDef [style.max-width]=\"(column.width + 24) + 'px'\">{{column.label}}</mat-header-cell>\r\n      <mat-cell *matCellDef=\"let row; let rowIndex = index\" [style.max-width]=\"(column.width + 24) + 'px'\">\r\n        <ng-container *ngIf=\"!column.editable; else editable\">\r\n\r\n          <ng-container *ngIf=\"row[column.name].constructor.name !== 'Date'; else date\">\r\n            {{row[column.name]}}\r\n          </ng-container>\r\n\r\n          <ng-template #date>\r\n            {{row[column.name] | date:'short'}}\r\n          </ng-template>\r\n\r\n        </ng-container>\r\n        <ng-template #editable>\r\n\r\n          <mat-progress-bar [class.show]=\"dataSource.renderedSavingRows[rowIndex].get(column.name) | async\" mode=\"indeterminate\"></mat-progress-bar>\r\n\r\n          <ng-container *ngIf=\"column.values; else elseIf\">\r\n            <mat-form-field [style.max-width]=\"column.width + 'px'\">\r\n              <mat-select [ngModel]=\"row[column.name]\" (ngModelChange)=\"cellChange(column.name, row, $event, rowIndex)\">\r\n                <mat-option *ngFor=\"let value of column.values\" [value]=\"value\">\r\n                  {{ value }}\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </ng-container>\r\n\r\n          <ng-template #elseIf>\r\n            <ng-container *ngIf=\"row[column.name].constructor.name !== 'Date'; else datepicker\">\r\n              <div class=\"edit-button\" [matMenuTriggerFor]=\"menu\">\r\n                {{row[column.name]}}\r\n                <mat-icon>edit_mode</mat-icon>\r\n              </div>\r\n              <mat-menu #menu=\"matMenu\">\r\n                <div mat-menu-item disabled class=\"full-height-menu-item\">\r\n                  <mat-form-field class=\"mat-cell\" [style.max-width]=\"column.width + 'px'\"> <!-- mat-cell is a hack to override the disabled state of mat-menu-item -->\r\n                    <input matInput #message [attr.maxlength]=\"column.maxLength\" [ngModel]=\"row[column.name]\" (ngModelChange)=\"cellChange(column.name, row, $event, rowIndex)\">\r\n                    <mat-hint align=\"end\">{{message.value.length}} / {{column.maxLength}}</mat-hint>\r\n                  </mat-form-field>\r\n                </div>\r\n              </mat-menu>\r\n            </ng-container>\r\n\r\n            <ng-template #datepicker>\r\n              <mat-form-field [style.max-width]=\"column.width + 'px'\">\r\n                <input matInput [matDatepicker]=\"picker\" [ngModel]=\"row[column.name]\" (ngModelChange)=\"cellChange(column.name, row, $event, rowIndex)\">\r\n                <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                <mat-datepicker #picker></mat-datepicker>\r\n              </mat-form-field>\r\n            </ng-template>\r\n          </ng-template>\r\n\r\n        </ng-template>\r\n      </mat-cell>\r\n    </ng-container>\r\n\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n  <mat-paginator [pageSize]=\"pageSize\"\r\n                 [pageSizeOptions]=\"pageSizeOptions\"\r\n                 [showFirstLastButtons]=\"true\">\r\n  </mat-paginator>\r\n</div>\r\n`,\r\n  styles: [`:host{display:block}:host ::ng-deep .mat-cell .mat-form-field-underline{visibility:hidden}:host .header{padding-top:24px;padding-left:24px;padding-right:24px}:host .header h2{display:inline}:host .header .actions{display:inline-block;float:right}:host .header .actions .search-field,:host .header .actions button{margin-left:10px}:host .mat-progress-bar{opacity:0}:host .mat-progress-bar.show{opacity:1}:host .mat-column-select{max-width:44px;overflow:visible}:host .mat-cell{flex-direction:column;align-items:flex-start;justify-content:center}:host .mat-cell .edit-button{cursor:pointer;line-height:24px;width:100%;box-sizing:border-box;padding-right:24px;padding-top:1.16em;padding-bottom:1.18em}:host .mat-cell .edit-button .mat-icon{float:right;margin-left:5px}.full-height-menu-item{height:auto;line-height:initial}`]\r\n})\r\nexport class DataTableComponent<T> implements OnInit, OnDestroy {\r\n\r\n  @Input() title: string;\r\n  @Input() columns: Column[];\r\n  @Input() sortColumn: string;\r\n  @Input() pageSizeOptions: number[] = [5, 10, 15];\r\n  @Input() pageSize = 5;\r\n  @Input() buttons: Button<T>[];\r\n\r\n  @Input() dataSource: AsyncDataSource<T>;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  displayedColumns = ['select'];\r\n  selection = new SelectionModel<T>(true, []);\r\n\r\n  filter: string;\r\n  private filterChanged = new EventEmitter<string>();\r\n\r\n  private cellChanged = new EventEmitter<{column: string, values: T, rowIndex: number}>();\r\n\r\n  private renderedRowsSubscription: Subscription;\r\n\r\n  constructor(private snackBar: MatSnackBar) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    for (const column of this.columns) {\r\n      this.displayedColumns.push(column.name);\r\n    }\r\n\r\n    this.dataSource.setup(this.paginator, this.sort, this.filterChanged, this.cellChanged);\r\n\r\n    // If the user changes the sort or the filter, reset back to the first page.\r\n    merge(this.sort.sortChange, this.filterChanged).subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n    this.dataSource.saveError.pipe(skip(1)).subscribe((error) => {\r\n      this.snackBar.open(error, null, {\r\n        duration: 2000,\r\n        horizontalPosition: 'right',\r\n        verticalPosition: 'bottom'\r\n      });\r\n    });\r\n\r\n    // Deselects rows if they are not in the current filter or page\r\n    this.renderedRowsSubscription = this.dataSource.renderedRowsObservable.subscribe((renderedRows) => {\r\n      for (const selected of this.selection.selected) {\r\n        if (renderedRows.indexOf(selected) === -1) {\r\n          this.selection.deselect(selected);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.renderedRowsSubscription.unsubscribe();\r\n  }\r\n\r\n  cellChange(column: string, row: T, newValue: any, rowIndex: number) {\r\n    row[column] = newValue;\r\n\r\n    this.cellChanged.emit({column: column, values: row, rowIndex: rowIndex});\r\n  }\r\n\r\n  filterChange(newValue: string) {\r\n    this.filter = newValue.trim().toLowerCase(); // Remove whitespace; MatTableDataSource defaults to lowercase matches\r\n    this.filterChanged.emit(this.filter);\r\n  }\r\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n  masterToggle() {\r\n    if (this.isAllSelected()) {\r\n      this.selection.clear();\r\n    } else {\r\n      this.selection.select(...this.dataSource.renderedRows);\r\n    }\r\n  }\r\n\r\n  /** Whether the number of selected elements matches the total number of rows displayed. */\r\n  isAllSelected() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource.renderedRows.length;\r\n    return numSelected === numRows;\r\n  }\r\n}\r\n\r\nexport interface Column {\r\n  name: string;\r\n  label: string;\r\n  width?: string;\r\n  editable?: boolean;\r\n  maxLength?: number;\r\n  values?: (string | number)[];\r\n}\r\n\r\nexport interface Button<T> {\r\n  icon: string;\r\n  action: (selected: T[]) => void;\r\n  selectionRequired: boolean;\r\n  multiSelection: boolean;\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport {\r\n  MatCardModule, MatCheckboxModule, MatFormFieldModule, MatInputModule, MatTableModule, MatDatepickerModule,\r\n  MatNativeDateModule, MatSelectModule, MatIconModule, MatMenuModule, MatPaginatorModule, MatSortModule, MatProgressBarModule,\r\n  MatSnackBarModule, MatButtonModule\r\n} from '@angular/material';\r\n\r\nimport { DataTableComponent } from './components/data-table/data-table.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCheckboxModule,\r\n    MatNativeDateModule,\r\n    MatDatepickerModule,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatProgressBarModule,\r\n    MatSnackBarModule,\r\n    MatButtonModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [\r\n    DataTableComponent\r\n  ],\r\n  exports: [\r\n    DataTableComponent\r\n  ],\r\n  providers: [\r\n\r\n  ]\r\n})\r\nexport class DataTableModule {\r\n  public static forRoot(): ModuleWithProviders {\r\n\r\n    return {\r\n      ngModule: DataTableModule,\r\n      providers: [\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}
